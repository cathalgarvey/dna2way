package dna2way

import (
	"testing"
    "math/rand"
    "time"
)

func init() {
    rand.Seed(time.Now().Unix())
}

func randNucleotide() string {
	return nucleotides[rand.Intn(4)]
}

func TestComplementarity(T *testing.T) {
	if testing.Short() {
		T.SkipNow()
	}
	testcases := map[string]string{
		"A": "T",
		"C": "G",
		"G": "C",
		"T": "A",
		"AT": "AT",
		"CG": "CG",
		"AC": "GT",
		"CGTA": "TACG",
		"CCAA": "TTGG",
		"GACC": "GGTC",
		"TGGA": "TCCA",
		"CGTGA": "TCACG",
		"GATTACCCAGATCAACGTA": "TACGTTGATCTGGGTAATC",
	}
	for forward, reverse := range testcases {
		testreverse := reverseComplement(forward)
		if testreverse != reverse {
			T.Error("Complementarity test failed for:", forward, "..expected:", reverse, ", got:", testreverse)
		}
	}
}

func TestCanonicalisation(T *testing.T) {
	if testing.Short() {
		T.SkipNow()
	}
	testcases := map[string]string{
		"C" : "G",
		"G" : "G",
		"T" : "T",
		"A" : "T",
		"TG" : "TG",
		"CG" : "CG",
		"GT" : "GT",
		"AT" : "AT",
		"GC" : "GC",
		"TA" : "TA",
		"TCCA" : "TGGA",
		"TGGA" : "TGGA",
		"GACC" : "GGTC",
		"TACG" : "TACG",
		"CGTA" : "TACG",
		"TTGG" : "TTGG",
		"CCAA" : "TTGG",
		"GGTC" : "GGTC",
		"CGTGA" : "TCACG",
		"TCACG" : "TCACG",
		"GATTACCCAGATCAACGTA" : "TACGTTGATCTGGGTAATC",
		"TACGTTGATCTGGGTAATC" : "TACGTTGATCTGGGTAATC",
	}
	for test, correct := range testcases {
		testcorrect := canonicalOrientationDNA(test)
		if testcorrect != correct {
			T.Error("Canonicalisation test failed for:", test, "..expected:", correct, ", got:", testcorrect)
		}
	}
}

func TestNumerification(T *testing.T) {
	if testing.Short() {
		T.SkipNow()
	}
	testcases8b := map[string]uint64{
	"ATTTGTGTAGCGGATTCGGG": 214,
	"TTAGTGACAGTTCGAGAGAC": 11,
	"ACGGCTCGCTCATAGCTCAG": 240,
	"TTGCTACGTTTGACCCATTT": 105,
	"TGAAGGTAATAGATGAACCG": 231,
	"GCAACCACTGGGGAGGTATC": 136,
	"GTCGCAAAATTGAGCAGAGG": 34,
	"GTATGCGTGTTGCAGAGCGC": 13,
	"GCACGTTTCTTCATTCAAGA": 115,
	"TCGGAACCATGGTCGGGTCA": 49,
	}
	for test, correct := range testcases8b {
		testcorrect, err := numerifyDNA(test, 8)
		if err != nil {
			T.Error("Numerification test failed for:", test, "expected:", correct, "Error:", err.Error())
		}
		if testcorrect != correct {
			T.Error("Numerification test failed for:", test, "..expected:", correct, ", got:", testcorrect)
		}
	}
	testcases16b := map[string]uint64{
	"GATGGTGCTAGCGACTTCTCGTCTCCGACTATCACACTCTCGGCTCTATGCCGCCAGAACTTTGGAAAGTCGCCATGGATCGGTAGTTAGTATCCACATT": 3897,
	"ATAACCAATTATTTATTCGCTAGCATGTTAAAGAATAGTATCCCTATCACTGGTGCCGACAAATCCAGAGCTTAGCTACGAACTTAGCTAGTTCGTTACT": 8075,
	"TACTCCTAACGTATCGGAATGTGCATGGATGCGTAACATAAGTTTAACTATGTGTCTAGGGCACGGTTATTGTGTTGAAGATCTTACTGATGGTGTCGGG": 32884,
	"TTCCATTATGGGGAAAAAAACGGAGGTCTATTATCCCCACATTCGGCTGGACCTCTACAGTGCGGCCTATTGATCTGAGCGCTTGTACTACGACCAGCGA": 48662,
	"ACTGTGGGGTGGCCGCGTTCCGTAAGGGGCAGGGTTGAATGTAAGGGGCTTAAGTTTATGCGTTCGATTTACACAAATGTCCGTTTAGCTACCGAGGACG": 3901,
	"CGGCTGGCCCAATTCGCTACAATACGGCTACTGCGATTGAGGTTATAGTAACGGGGCGTCCCACCAATCAATGATCAGCGAAAATACCCATAAGTTGTAT": 30958,
	"GACTCAGAAGCAACGCTGCATAACACCATCTCCCCACGTTCCAACGCTACGATGTCTGCCACGAAATCATCTGGCCGGACTTCCGCGACTTACTGCCGTT": 46865,
	"TATCTAAACATGACCACTTTCCCCCATATTATGCTTCAACATATTCCTCTGATGACGCAATTCTTCATCGGAATTTTGTCATTGTCCTGCTACAAAATCC": 32009,
	"GGCGGGGATAGTCTCTGTATGAACGTCTTCTCCGCAGGCGAAACCGGATACACGACGTATCTCCAAAAGCAAGCAAGTAGGCCTACACGTGTTCGTGTAA": 59198,
	"GGCAAAATATGTAAGCTAAACAGGTGCGTAAGTTTCATAGCCAAGAGCATAAACCAGAGAACGTTGTGGGTATTTGTCGAAAATGTAAGTTCGTGCGTAT": 60203,
	}
	for test, correct := range testcases16b {
		testcorrect, err := numerifyDNA(test, 16)
		if err != nil {
			T.Error("Numerification test failed for:", test, "expected:", correct, "Error:", err.Error())
		}
		if testcorrect != correct {
			T.Error("Numerification test failed for:", test, "..expected:", correct, ", got:", testcorrect)
		}
	}
}


// stringChunks(s string, chunklen int) []string
func TestChunks(T *testing.T) {
	if testing.Short() {
		T.SkipNow()
	}
	testcases5chunks := map[string][]string{
	"AACGGTAAAA": []string{"AACGG", "TAAAA"},
	"ACGCAGCTCAA": []string{"ACGCA", "GCTCA", "A"},
	"AATCAATCGGGG": []string{"AATCA", "ATCGG", "GG"},
	"CCGAGAGGTATTA": []string{"CCGAG", "AGGTA", "TTA"},
	"AGAAAATAAGCAGA": []string{"AGAAA", "ATAAG", "CAGA"},
	"TTGTATCGCTCGAGG": []string{"TTGTA", "TCGCT", "CGAGG"},
	"AGAATAGGCCTCCACG": []string{"AGAAT", "AGGCC", "TCCAC", "G"},
	"CGAGACCCTTTACCGCG": []string{"CGAGA", "CCCTT", "TACCG", "CG"},
	"AAGTAAATCCCGACCTAG": []string{"AAGTA", "AATCC", "CGACC", "TAG"},
	"CCAACCAAGCATGCACAAT": []string{"CCAAC", "CAAGC", "ATGCA", "CAAT"},
	"CCTTAACAATGTGAGAGGTG": []string{"CCTTA", "ACAAT", "GTGAG", "AGGTG"},
	"TCGTGCATTAGTGTGAGTAAC": []string{"TCGTG", "CATTA", "GTGTG", "AGTAA", "C"},
	"ACTAGGGGGTGACGACCATGAG": []string{"ACTAG", "GGGGT", "GACGA", "CCATG", "AG"},
	"ACACATTGCTGCGTGCCGAGCTA": []string{"ACACA", "TTGCT", "GCGTG", "CCGAG", "CTA"},
	"TCGGCAGATTCTGCCGGGATGGAT": []string{"TCGGC", "AGATT", "CTGCC", "GGGAT", "GGAT"},
	"ATCTAGACCCCGGGGAAGCTCTCCA": []string{"ATCTA", "GACCC", "CGGGG", "AAGCT", "CTCCA"},
	"AACACAAGCTAAAAGCCTCGGCGTCG": []string{"AACAC", "AAGCT", "AAAAG", "CCTCG", "GCGTC", "G"},
	"AAAATCATTAGTATGGCATCGAGTAGC": []string{"AAAAT", "CATTA", "GTATG", "GCATC", "GAGTA", "GC"},
	"CATTCTGCAGACAGACGGATCCCGACTT": []string{"CATTC", "TGCAG", "ACAGA", "CGGAT", "CCCGA", "CTT"},
	"TAGACAAAACAGTTCCGGGGCAAGACGGC": []string{"TAGAC", "AAAAC", "AGTTC", "CGGGG", "CAAGA", "CGGC"},
	}
	for test, correct := range testcases5chunks {
		testcorrect := stringChunks(test, 5)
		for ind, ch := range testcorrect {
			if correct[ind] != ch {
				T.Error("Chunking test failed for:", test, "..expected:", correct, ", got:", testcorrect)
			}
		}
	}
}

func TestCompression(T *testing.T) {
	if testing.Short() {
		T.SkipNow()
	}
	testcases16b := map[string]uint64{
	"TGCGAGGCTAGGTCCCCACCGTTGGTAGATATGGCACTCATGATAACTGCATCTGCTGGCATTAGGTATCTGAATTTCTGGCAACCCTTCTCAGGAGTCC": 28435,
	"TGCGACCCAGGGGGGGGCCGCGATAGATGTCAGGAGGTCAAAGACATCCGACCCTCAACACTCGGTCCTTAACCACTATCTCAGGATGTCGCGACCATGGG": 22634,
	"ACCGATCGTGTGTATACCGTCACATGGGATCGGGAAAAATGTCCACTGTGCGATCCACTAAGACATGACGTCACACGGTAGTTCCCGATTCCATTGTGGTCT": 28747,
	"TCTGAATAGAGGCATGCTAGTTGCCTAACGCAGTTCAGACAATTATCTTGCTAGTTTGCCGTTTTCTACCGTCTAGTATGGTTCTGTTCACAACGCAAATAGT": 47628,
	"GTACCGTGCCATCGGGTCCGCGCCGTAAGTTTATGAAGGCATACGCGTGCGTACCTACAACTGGAAGATGCGACAGTCGATAAAACTTGCCCGGTCGTTTTCTG": 60137,
	"TCCTAAGCGCAGTGACGAGACTTCTAAATGCTCGCAGATGGCTATGTTTATACAGCAGGTAAAGGTCTATTTGCTGGAATGACAAAGGTACCGTTATTTCGTGTA": 50933,
	"AGTCATACCAAGACCAATCCTGCTGGCGGGAACGAGTCACTCCATTTGCTTGCAAAGATAACGTTGCCGCCAAACACGGACTGTGCATGCAAAGAAACAGGTAATT": 38058,
	"GGCTCTAGATCATAATAATATTGGCCGTCAATATAGGGGTGTGCGCTGGAAGGTGCCACAGGATGCTGTAACGGCGGTTAGGACCCCACGCGCTTGCTTGCGGCGGT": 9691,
	"CCGGGATTGATCTATTCACAGTGCGGAGAAGCCCATAACTGCACGTGGTCCTCGGAATAGAGTTAAGAGCAGTTCAACACCCAATGCCTTAGAGCGATTGGGAACAGT": 37750,
	"CGCTGGTATTGCTGTCAGGCTCCTATGTACTCTGTGCTGAATAGAATAAGGGTATTACGGGCGAGTAGGTGTGCGTGAACTAATGTCACGATGCGCACGCACCTGCCTC": 49478,
	}
	for test, correct := range testcases16b {
		testcorrect, err := compressDNA(test, 0, 16)
		if err != nil {
			T.Error("Compression test failed for:", test, "expected:", correct, "Error:", err.Error())
		}
		if testcorrect != correct {
			T.Error("Compression test failed for:", test, "..expected:", correct, ", got:", testcorrect)
		}
	}
}

func TestDNA2Way(T *testing.T) {
	testcases := map[string]uint64{
	"TGGTCGGTTAGAGATCATTCCACGGAACGGGATGTAGAGAGGCGCGACTTTACTGGAATGATGTCTTCCTCGGAAGATCTGGCTTTATTAGGACACGCGC": 3803848460,
	"GGGGTTCAAACCGCTTCACTATGATACAAGTGTTCCTTGCATTCAATTTCGGGAGCGTCTCACAATACAAAATCTGAGCATTAGTTTGTTTCACACTAGGAT": 2258621272,
	"GCCGGGCTGTTCGCCAAAAGAAATTGCACCACAGAATCAGCCGCGAGTCCCGTGTCCCAAACACCTGGACTGCTAAGCGCTCAATGCAGTGGGACATTCCGGAAAC": 3179572679,
	"TAGCAGGCGTAACTGGGCGAACGTAGGTTGCGTGGTGTCGGATAAGAAAGGTTACCCTTGCAGTTAGTCCGCAAGGCATCATTGCACACCGATTCGAGCCCGAAGGCGGTCT": 3480670068,
	"GACTAGCCTCAGTGCCCCACTTATCTCATCTGTTACGTGAGCGGTCACGTCTCCGCTTGTCCATTCGAGGTTATTATAAGTCTATCCCCGGCGACCCCAAGAGTCAAGGCTATACAGGAA": 3354324623,
	"AATAGCCTCGTTCTCTATGAAAGCGACACTTTTCGGAATCACCTACACCGTGTCGTCAGATCAGGTATAGCGCTTTGCACCACATCGCGTTGTGGTAGGATCCATTAAATAATTACCATATACGATAATA": 42653614,
	"CACACTACAACACCAAGTTAATAGTTGTTCTACGCGGCAGCGTCGCTACCTCATTCTGCCCCGGCGATTCCCGGTTGACACGTGCAAATAGAATCTGCAGCTGACTCCTTGTCTGGGTGCTATGGCGACGTCAAATCTTGGT": 2721968089,
	"CTAATTGGATAGTGTAATCTCCCTACTCCTTAGCTTCTAGTGCACGACACCGTTGGCGGGAGACTCGTCACTTATCGTGAGGAGAGGAAACCTTAATACTGTTCGGGCCTCTGGCCACTTCACCCGTATCAACAACACCCAGGGCCGGACACTCCA": 1906580711,
	"CGCACGGTTCAAGCGCTGGTCGCTTGCTCTGAATCCCTACCAGGGGCTATTGAATGGATGTCCTTCGTCTTTAGGCCTACGGGTCTAATCATTCTTTGAGACACCTTATTAGATCGCGGCGCTGCATCGTTCTACCCAATCTAAGCAGAGTCGCTATGGAACAGTCCGGGTC": 421969653,
	"AATGGACTCTGCGAACTTGTGTCACCTCACGCGGCCTGCAAATTAATGATTAATAGGGATCGCGAAATAGGTACATTATCGCGCCAGACAAGGTGTGTTCTATAAAATGAGGCATGTACCGCGATCAAAGAATTGCACCGAGCATGTATCTTTTCCAGAACCTAAATTCCGACCTGCTGGATCCAACGTG": 1720239191,
	"ATTGCTTGTGCGAAGCAAGTCTAACCTAGAGTACGTAATGGACGTGCACCACGCTTGCTTGACCACAAGATGCATAATGCTTTTCGGCTCAATCCCGAGGGTATGCCAGAATGACCAACCATCAAAATCGGCCGTTATTCTACTTCCCCGGTATGCAATTAAGGAGATCAACTCTGGCCTAGGAGACCTCCCTAATTCTACGAATACGCT": 1363241698,
	"GCGCAGTGTGATCGAACTTGCGAGTAGGAGGCGGCCCAACGAACGTTAACACGGACTGTCTACATGCTTGATTTAGCCTCTTGAGAAGGCCGCGAAGTCGAATGGTCATCACCTCCTCAGCTCGGGGACTATGCAGGAGCTGTGGCCCTTAAATTCTACCTGGTTTCCTAGTTTTTCCAGAGCACTTGGGTTTTTGAATACCGTACGTAAGAAAGCGGTGTTTCAATAATCC": 995221074,
	"ATCAAGGCTGGTGTCTTTGTAAGGCGCGTAGCGTTTGGTTAACCCTGTGTAAGACCAGAAACCGGAGAGGAGTGATGGCGCTCTAAGTTGCGCCTGAGTTATCTTAAGTGAGTAAATAAAATCAAAAACCTACGAACTATCCTGACTGTATAAACACCGTTCCTAGGGATGTCGAGTGGTGGCTAGGGAGGAGGTGAGGCTACGGACGGTAGGAGTTCGCGGTAGGTGCGGCAAATATGGAAACCGTGCTAACGTC": 643892413,
	"CTACTGAGCCCTAGTCGTGCCAATCGGGGGCTAGCAACAAATCAACTTCCTCCGAGAGTACGCCCTGTCCACTTTACCTTGCTACGGTCCTAGTAGAGACCGCGTTTTTATTTGGCAGGGCAATACGCGCCTCTATGCGTACCTCAGTGCGGATGAGTAGTTCTGGAAAGATCGCTTGCATGTGCCGTTGAAATGGCCTGACCTGGATTTGGCGTCGTAATTTCAAAACTTTCTGGTAAAGTCGAGGGCAGGCCCGTTTACTATGCTGCTAGTTGACGCCAA": 4285549681,
	"CCATACAGAGGCCGTCTCTGCCATACGAGTAGGCAAATTCTACTGTTGATTGCCTTCGTCTCGTCTCACTAAAGTACCTACGTTGCTCTACCTTCGATCAACGTCCTAGCACCAACTACGGGCTCCAACCATTGTAAGGTTACCCACACGCACGACTCATCAAGCCGACAGTGCGACAACACTCACCGGTTCACACACACGACTTAGGGTAGGGTTCTATTTAAAATGTTTCAAAGCAATAGCGCTTCAGTTTAAGACCACTGGTTTCTCGTTCGGCGGCAGTCTTTCGGTCACCTTGAACATCCGATCA": 4098218119,
	"GCATAGTTTCGCCCGAAGCATGTGACATCTTTCACTGGTGTCGGGCTGATCTATCGAGGTATTCAGTGTCGTATGAATTGAGAGCTCCTTGGAGCCCGCGGCCACCAGATCCAAATGAGCCTGGCCGGTTTTTATAGAAACACGATAGGCCAAGCATTGGATTTACTGATCCACATAGTTCAAGGAGACTTAGCTCACGGCTCCCATGCGGCCTTGATAAGGTATTTCTATCCCTTGGTCCGGTACCCGCAAACCTAGAATGACGAGTACGCTTTCTCCTGGGCTTACTTCAAGATCGTGGATCTGGGCCCGGTACAAGAGGCTTGCCTTTATTTACTAG": 3295817950,
	"CTCTGAGGGGATAGGTTGTTCCCAAGTCAAAGAACCAAGCGTATTGCACCGGGATAAATGTAGATCTATCTTTACGCGGCCACCCACAGGACTCTTCGAAGGGTCTAAACTCCAGTCAGGGAGCAGCTAAGTATATTGGGTCCTGTAACCGCTGCAAATGTGGCGGTTAGAGGGTATCAAGTATAATACGCGCATAGGTCGAGATATCGCTTAGGCCCAGCCTATGATCAACATAACCGTCCCCTAAGGGTAGAATGACGCAGACAGTTCAACCTTTCTGACAATCCTACGCCCGCGCAGTTAGCAAGCAGCTTTGAGCGCTGCCTTACCAGCCGTCCATCTTCTTGGGAGAGCTTCAGATGGGGGGACCGT": 4157034945,
	"GGCAGCAAAGGATGAACTGAAGCAACTTCTCCCTGAAAAGGCCCATCATTCCCTTGGGCTGGAAATGGTAAGAAATGCTTCGCCCGTGTTCCTGCTGTGTCTCAGCCTGGTTGGCGAACTAGTGGTTTTATAACTCCGCTGTCGGGGTTATACTGCTTGCAGAAAGTTGCATTAGGGCGCAGGCTTCAACAAACTGGGTACGTCACGGTTATTCACGTGGGGAAGGGAGACTTAGACTCAAAATGCAGTCCCTCACTAGGCTTCACGACAAAATTGTCGTAATCTTTGGCCCATGAGCAGGAGGAATCGCAGAAAATTTTTATGCAAGCTAGGAAAGAAGACGCGCATTTTCCGTCTGGCGGTCTTAATTACTAGAGATTCTAACGAGCAGCGCACAATTAAGACA": 2461484551,
	"GTCCAAGGAACGTGCTATTTTGACTTAAGCGGCACCACTTGCTGATACTTGGCTGCAAGGAAATCTATCATAACACGACATTACACCGCACCGTCTTTTTATCCGATCACAAAATGTTCACTGCAAATAATATACAGGCATCCACAGGTTTGTTTACGTCAGAGTCTAAAAGGTCGGGCCTAATACATAAGACACGCAGAAAGGTGTTGAATGAACGAGCTTGCAGCCCTTCATAAATACGGTGTATACAGGTAAACAGCGAAACCGCCGCAGATTCTTCCTAGCTCTGACACGACTTGAGCCAGTATCGCACGCAAGATACGCTGTCGTTGCCTCATAACTGTATCAGATGGACTGTCAAATGACGAGACCGGTTAACACACGTGACCTACTTGATTAGCCGCATACTGTCATTTGAGTCGGGGAAAACTCTGCACGAATG": 3808868423,
	"CTGTTGACACCTCGGCCAGGTCGTTTTGCCTAGTATGCGTGAGGAGGCTGACATTCCAGCGCGGTTCGGAAAAGAACGTTTCAGTGGATTTGGGAGCCAATCGCTGGCAGTTGGAGCATCCAACGGACAAATCCTGTTTACCCCGCTGTATAAAAGGTAGACCCAGAGAGCATGCAGGAAGGCCCGGGTTAGAACGAAACGTAATGTGGGTGCCTGAATAGGAAAGTGCTAACCGGTTAAGGAAGGTCTTTGATGACGCCTCGCACTTGCTGGACTTGACATAGTACACGACTTGCTCGCTTTATAACTATGCTGTCTAAACGGGGTCCCAGACCAGTTAGCGGAAGATCCGTAGGATCGGGGATTTTTGACCGGCGGGCTTAACCAAGGGATCCTGCCGTCAACCTAGGGAGGTGGGGTGACAATCACCCCTCCCTACCAACGTTTCTCGACGGCCGATGTTCCGCACCGGCGCTGGTA": 4205895438,
	}
	for test, correct := range testcases {
		testcorrect, err := HashDNA(test, 32)
		if err != nil {
			T.Error("HashDNA test failed for:", test, "expected:", correct, "Error:", err.Error())
		}
		if testcorrect != correct {
			T.Error("HashDNA test failed for:", test, "..expected:", correct, ", got:", testcorrect)
		}
	}
	
}
